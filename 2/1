generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID           Int            @id @default(autoincrement())
  email            String         @unique
  name             String
  activeStatus     Boolean        @default(true)
  researchGroupID  Int?
  permission       String         @default("Research Student")
  registrationDate DateTime       @default(now())
  password         String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  researchGroup    ResearchGroup? @relation(fields: [researchGroupID], references: [researchGroupID])
  auditGenerals    AuditGeneral[] @relation("UserAuditGenerals")
  audits           Audit[]        @relation("UserAudits")
  logs             Log[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [userID], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userID], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chemical {
  chemicalID        Int            @id @default(autoincrement())
  casNumber         String
  restrictionStatus Boolean
  chemicalName      String
  locationID        Int?
  activeStatus      Boolean        @default(true)
  researchGroupID   Int?
  supplier          String?
  description       String?
  chemicalType      String         @default("Chemical")
  auditStatus       Boolean        @default(false)
  lastAudit         DateTime?
  quartzyNumber     String?
  qrID              String?        @unique
  quantity          Int            @default(1)
  dateAdded         DateTime       @default(now())
  dateUpdated       DateTime       @updatedAt
  subLocation1      String?
  subLocation2      String?
  subLocation3      String?
  subLocation4      String?
  qrCode            QrCode?
  auditRecords      AuditRecord[]
  location          Location?      @relation(fields: [locationID], references: [locationID])
  researchGroup     ResearchGroup? @relation(fields: [researchGroupID], references: [researchGroupID])
  logs              Log[]

  @@map("chemicals")
}

model ResearchGroup {
  researchGroupID Int        @id @default(autoincrement())
  groupName       String     @unique
  users           User[]
  chemicals       Chemical[]
}

model QrCode {
  qrID       String     @id
  type       QrCodeType
  locationID Int?       @unique
  chemicalID Int?       @unique
  chemical   Chemical?  @relation(fields: [chemicalID], references: [chemicalID])
  location   Location?  @relation(fields: [locationID], references: [locationID])
}

model Location {
  locationID   Int           @id @default(autoincrement())
  building     String
  room         String
  qrID         String?       @unique
  qrCode       QrCode?
  auditRecords AuditRecord[]
  audits       Audit[]
  chemicals    Chemical[]

  @@map("locations")
}

model Log {
  logID       Int       @id @default(autoincrement())
  userID      Int?
  actionType  String
  chemicalID  Int?
  description String
  timestamp   DateTime  @default(now())
  chemical    Chemical? @relation(fields: [chemicalID], references: [chemicalID])
  user        User?     @relation(fields: [userID], references: [userID])

  @@map("logs")
}

model AuditGeneral {
  auditGeneralID Int       @id @default(autoincrement())
  round          Int
  auditorID      Int
  pendingCount   Int       @default(0)
  finishedCount  Int       @default(0)
  startDate      DateTime?
  lastAuditDate  DateTime?
  status         String
  auditor        User      @relation("UserAuditGenerals", fields: [auditorID], references: [userID])

  @@map("audit_general")
}

model Audit {
  auditID       Int           @id @default(autoincrement())
  locationID    Int
  auditorID     Int
  startDate     DateTime      @default(now())
  lastAuditDate DateTime?
  round         Int           @default(1)
  notes         String?
  pendingCount  Int           @default(0)
  finishedCount Int           @default(0)
  auditRecords  AuditRecord[]
  auditor       User          @relation("UserAudits", fields: [auditorID], references: [userID])
  location      Location      @relation(fields: [locationID], references: [locationID])

  @@map("audits")
}

model AuditRecord {
  auditRecordID Int       @id @default(autoincrement())
  auditID       Int
  chemicalID    Int
  status        String
  notes         String?
  auditDate     DateTime  @default(now())
  lastAuditDate DateTime?
  locationID    Int
  audit         Audit     @relation(fields: [auditID], references: [auditID])
  chemical      Chemical  @relation(fields: [chemicalID], references: [chemicalID])
  location      Location  @relation(fields: [locationID], references: [locationID])
  people        String

  @@map("audit_records")
}

enum QrCodeType {
  CHEMICAL
  LOCATION
}
